
#nombre de configuraci√≥n
name: API mongo-express

# accion que detonan los jobs CI
on:
  push:
    branches:
      - main
      
    

# las tareas que se van a ejecutar
jobs:

  # Compilar nuestro proyecto  
  build:

    # Define sobre que SO se va a compilar
    runs-on: ubuntu-latest

    # PASOS PARA CONCRETAR EL CI/CD CON GITHUB ACTIONS
    # 1 - Hacer login y definir que se va a utilizar heroku registry
    # 2 - Despues de hacer el build de imagen agregar al registro de heroku
    # 3 - Heroku tiene que jalar de registry la imagen para hacer el release

    steps:
      - run: echo "üêß This job is now running on a ${{ runner.os }}  server hosted by GitHub!"
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."\
      
       # Check-out your repository.
      - name: Checkout
        uses: actions/checkout@v3 # version de github actions que vamos a usar


      - name: Build, Push and Release a Docker container to Heroku. # Your custom step name
        uses: gonuit/heroku-docker-deploy@v1.3.3 # GitHub action name (leave it as it is).

        with:

          # The email address associated with your Heroku account.
          # If you don't want to use repository secrets (which is recommended) you can do:
          # email: my.email@example.com
          email: vicm_13@hotmail.com
          
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          
          # Name of the heroku application to which the build is to be sent.
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}

          # (Optional, default: "./")
          # Dockerfile directory.
          # For example, if you have a Dockerfile in the root of your project, leave it as follows:
          dockerfile_directory: ./

          # (Optional, default: "Dockerfile")
          # Dockerfile name.
          dockerfile_name: Dockerfile

          # (Optional, default: "")
          # Additional options of docker build command.
          docker_options: "--no-cache"

          # (Optional, default: "web")
          # Select the process type for which you want the docker container to be uploaded.
          # By default, this argument is set to "web".
          # For more information look at https://devcenter.heroku.com/articles/process-model
          process_type: web
      
     

      
     
  # Instrucciones para ejecutar los test
  test:
    
    # Define sobre que SO se va a compilar
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: backend tests
        uses: actions/setup-node@v3
        with:
          node-version: '12.x'
            
      # Similiar a npm install
      - run: npm ci 
      - run: npm test 






